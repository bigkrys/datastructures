//递归
/**
 * 1、递归的概念：
 * 
 * 递归的过程：先往前问的过程叫做递，最后的答案往回发的过程叫做归。
 * 基本上，所有的递归问题都是可以用递归公式来表示：f(n) = f(n-1) +1,其中f(1) = 1
 * 那么 基本的递归代码就是下面这样了
 * function f(n){
 *  if(n == 1) return 1;
 *  return f(n-1) + 1;
 * }
 * 
 * 2、递归的条件
 * 满足下面3个条件的问题，就可以使用递归来解决
 * a.一个问题的解可以分解成几个子问题的解（由大化小）
 * b.这个问题与分解之后的子问题，除了数据规模不同，求解思路一样
 * c.存在递归终止条件 （n=1的时候，有已知结果）
 * 
 * 
 * 3、写递归的方法：先写出递推公式，找到终止条件
 * 如果一个问题A可以分解为若干个子问题B、C、D，你可以假设B、C、D都是已知的条件，在这个基础上面思考如何解决问题A，而且你只需要思考
 * A和B、C、D之间的关系就可以了，不需要再往下深究，所以写递归的关键是，只要遇到递归，就把它抽象成一个递推公式，不用想一层层的调用关系，
 * 不要试图用人脑去分解递归的每个步骤。
 * 
 */


/**
 * 假如这里有 n 个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走这 n 个台阶有多少种走法？
 
 * 首先，找出递推公式
 * 当我踏出第一步的时候，有两种走法，就是走1个台阶，那么就剩下n-1个台阶；如果我第一步走出2个台阶，那么就有n-2个走法。
 * 所以，递推公式就是 f(n) = f(n-1) + f(n-2)
 * 
 * 接下来，找到终止条件。
 * 那你想，最后肯定就是只能垮1个或者最后垮2个，那就是说
 * n==1 的时候 就是1个走法，因为是最后一步了
 * n==2的时候，就有2个走法，你可以一次垮2步，或者一次一步
 * 所以终止条件就是 n==1 return 1,n==2 return 2
 */

function find(n){
    if(n == 1) return 1;
    if(n == 2) return 2;
    return find(n-1) + find(2);
}